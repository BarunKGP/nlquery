// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ThreadStatus string

const (
	ThreadStatusActive  ThreadStatus = "active"
	ThreadStatusDormant ThreadStatus = "dormant"
	ThreadStatusDeleted ThreadStatus = "deleted"
)

func (e *ThreadStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ThreadStatus(s)
	case string:
		*e = ThreadStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ThreadStatus: %T", src)
	}
	return nil
}

type NullThreadStatus struct {
	ThreadStatus ThreadStatus
	Valid        bool // Valid is true if ThreadStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullThreadStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ThreadStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ThreadStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullThreadStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ThreadStatus), nil
}

type Thread struct {
	ID           int64
	Createdat    pgtype.Timestamptz
	Lastmodified pgtype.Timestamptz
	Query        string
	Userid       pgtype.Int8
	Status       NullThreadStatus
	Threadfileid pgtype.Int8
}

type ThreadFile struct {
	ID           int64
	Userid       pgtype.Int8
	Createdat    pgtype.Timestamptz
	Lastmodified pgtype.Timestamptz
	Columns      string
	Types        string
}

type User struct {
	ID             int64
	Createdat      pgtype.Timestamptz
	Lastmodified   pgtype.Timestamptz
	Name           string
	Email          string
	Provideruserid pgtype.Text
	Imagesrc       pgtype.Text
}
