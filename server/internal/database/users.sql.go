// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	name, email, providerUserId, imageSrc, createdAt, lastModified
) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, createdat, lastmodified, name, email, provideruserid, imagesrc
`

type CreateUserParams struct {
	Name           string
	Email          string
	Provideruserid pgtype.Text
	Imagesrc       pgtype.Text
	Createdat      pgtype.Timestamptz
	Lastmodified   pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Provideruserid,
		arg.Imagesrc,
		arg.Createdat,
		arg.Lastmodified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Lastmodified,
		&i.Name,
		&i.Email,
		&i.Provideruserid,
		&i.Imagesrc,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, createdat, lastmodified, name, email, provideruserid, imagesrc FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Lastmodified,
		&i.Name,
		&i.Email,
		&i.Provideruserid,
		&i.Imagesrc,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, createdat, lastmodified, name, email, provideruserid, imagesrc FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Lastmodified,
		&i.Name,
		&i.Email,
		&i.Provideruserid,
		&i.Imagesrc,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, createdat, lastmodified, name, email, provideruserid, imagesrc FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Lastmodified,
			&i.Name,
			&i.Email,
			&i.Provideruserid,
			&i.Imagesrc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProviderUserId = `-- name: UpdateProviderUserId :exec
UPDATE users
	SET providerUserId = $2
	WHERE id = $1
`

type UpdateProviderUserIdParams struct {
	ID             int64
	Provideruserid pgtype.Text
}

func (q *Queries) UpdateProviderUserId(ctx context.Context, arg UpdateProviderUserIdParams) error {
	_, err := q.db.Exec(ctx, updateProviderUserId, arg.ID, arg.Provideruserid)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
	set name=$2,
	email=$3,
	lastModified=$4
WHERE id = $1
`

type UpdateUserParams struct {
	ID           int64
	Name         string
	Email        string
	Lastmodified pgtype.Timestamptz
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Lastmodified,
	)
	return err
}
